name: lens
version: 4.13
id: lens-4.13-95a130ea30ca3a838ac646bc12f4c0d1
key: lens_9a2djBByzhQCLaegMRr5W5
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.Review Control.Lens.Internal.Setter
    Control.Lens.Internal.TH Control.Lens.Internal.Zoom
    Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
    Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
    Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
    Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
    Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
    Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
    Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
    Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
    System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
    Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/emmanuel/Dropbox/haskell/brun_fast_git/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.2/lens-4.13-9a2djBByzhQCLaegMRr5W5
library-dirs: /home/emmanuel/Dropbox/haskell/brun_fast_git/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.2/lens-4.13-9a2djBByzhQCLaegMRr5W5
data-dir: /home/emmanuel/Dropbox/haskell/brun_fast_git/.cabal-sandbox/share/x86_64-linux-ghc-7.10.2/lens-4.13
hs-libraries: HSlens-4.13-9a2djBByzhQCLaegMRr5W5
depends:
    array-0.5.1.0-d4206b835b96b5079d918fa1eab1a9a8
    base-4.8.1.0-4f7206fd964c629946bb89db72c80011
    base-orphans-0.4.4-61f87fbe40b70a96b4f01742198bd89e
    bifunctors-5-06680d8819c4b9bbf1676ae1390767b5
    bytestring-0.10.6.0-2362d1f36f1255e85478e7793e15b170
    comonad-4.2.7.2-b1b638c93067c190c2ec535102389f4b
    containers-0.5.6.2-2de75421d746ab474b330e43191bb31b
    contravariant-1.3.3-b12b14e5855d051e62e0470d30aee157
    distributive-0.4.4-8ccf7d9b4dba827f6bbdf2f9c6ea65a1
    exceptions-0.8.0.2-b08bd0de7dff383d124cad3f4c34eddd
    filepath-1.4.0.0-8fee9c13b5e42926cc01f6aa7c403c4b
    free-4.12.1-e22a2dc4665435fd8d53e39b3530bcae
    ghc-prim-0.4.0.0-af16264bc80979d06e37ac63e3ba9a21
    hashable-1.2.3.3-80550537c7909140be870afef59b4dda
    kan-extensions-4.2.3-24014274bd1e4fee2e3636b75856bf03
    mtl-2.2.1-5cf332b11edb88a6040af20fd6a58acb
    parallel-3.2.0.6-1e3b7b57355fcf35c2a5d9b89c06137c
    profunctors-5.1.1-94b0f7034cf809183c61149785a8ff2d
    reflection-2.1-c963812bcf774939a9bbb4b4c136dab4
    semigroupoids-5.0.0.4-02d14ffb9b70e76d92bc716fe1b6eb43
    semigroups-0.17.0.1-614f148d3938a364e9de81982cf5c855
    tagged-0.8.1-8fb7724b78ef88e44ca8950c77a173f6
    template-haskell-2.10.0.0-90e8393d65f4ae44cb2026177a257f28
    text-1.2.1.3-202edba6fea901191194d38d810da662
    transformers-0.4.2.0-21dcbf13c43f5d8cf6a1f54dee6c5bff
    transformers-compat-0.4.0.4-3ca5cbcec233c17da785d5f27705643c
    unordered-containers-0.2.5.1-716f4718f442df81f737706b1d02ca94
    vector-0.11.0.0-a3d62f13dd9bf59f0f8bbb8613e9a160
    void-0.7.1-27a9a9fd474850b6a0bb8b4a321857fb
haddock-interfaces: /home/emmanuel/Dropbox/haskell/brun_fast_git/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.2/lens-4.13/html/lens.haddock
haddock-html: /home/emmanuel/Dropbox/haskell/brun_fast_git/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.2/lens-4.13/html
